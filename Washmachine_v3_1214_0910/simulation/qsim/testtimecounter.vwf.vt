// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/13/2023 17:56:14"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    TimeCounter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module TimeCounter_vlg_sample_tst(
	clk,
	reset,
	state_in,
	sampler_tx
);
input  clk;
input  reset;
input [2:0] state_in;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or state_in)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module TimeCounter_vlg_check_tst (
	alarm,
	dewater,
	seg0,
	seg1,
	seg2,
	seg3,
	wash,
	water,
	sampler_rx
);
input  alarm;
input  dewater;
input [3:0] seg0;
input [3:0] seg1;
input [3:0] seg2;
input [3:0] seg3;
input  wash;
input  water;
input sampler_rx;

reg  alarm_expected;
reg  dewater_expected;
reg [3:0] seg0_expected;
reg [3:0] seg1_expected;
reg [3:0] seg2_expected;
reg [3:0] seg3_expected;
reg  wash_expected;
reg  water_expected;

reg  alarm_prev;
reg  dewater_prev;
reg [3:0] seg0_prev;
reg [3:0] seg1_prev;
reg [3:0] seg2_prev;
reg [3:0] seg3_prev;
reg  wash_prev;
reg  water_prev;

reg  alarm_expected_prev;
reg  dewater_expected_prev;
reg [3:0] seg0_expected_prev;
reg [3:0] seg1_expected_prev;
reg [3:0] seg2_expected_prev;
reg [3:0] seg3_expected_prev;
reg  wash_expected_prev;
reg  water_expected_prev;

reg  last_alarm_exp;
reg  last_dewater_exp;
reg [3:0] last_seg0_exp;
reg [3:0] last_seg1_exp;
reg [3:0] last_seg2_exp;
reg [3:0] last_seg3_exp;
reg  last_wash_exp;
reg  last_water_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:8] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 8'b1;
end

// update real /o prevs

always @(trigger)
begin
	alarm_prev = alarm;
	dewater_prev = dewater;
	seg0_prev = seg0;
	seg1_prev = seg1;
	seg2_prev = seg2;
	seg3_prev = seg3;
	wash_prev = wash;
	water_prev = water;
end

// update expected /o prevs

always @(trigger)
begin
	alarm_expected_prev = alarm_expected;
	dewater_expected_prev = dewater_expected;
	seg0_expected_prev = seg0_expected;
	seg1_expected_prev = seg1_expected;
	seg2_expected_prev = seg2_expected;
	seg3_expected_prev = seg3_expected;
	wash_expected_prev = wash_expected;
	water_expected_prev = water_expected;
end


// expected seg0[ 3 ]
initial
begin
	seg0_expected[3] = 1'bX;
end 
// expected seg0[ 2 ]
initial
begin
	seg0_expected[2] = 1'bX;
end 
// expected seg0[ 1 ]
initial
begin
	seg0_expected[1] = 1'bX;
end 
// expected seg0[ 0 ]
initial
begin
	seg0_expected[0] = 1'bX;
end 
// expected seg1[ 3 ]
initial
begin
	seg1_expected[3] = 1'bX;
end 
// expected seg1[ 2 ]
initial
begin
	seg1_expected[2] = 1'bX;
end 
// expected seg1[ 1 ]
initial
begin
	seg1_expected[1] = 1'bX;
end 
// expected seg1[ 0 ]
initial
begin
	seg1_expected[0] = 1'bX;
end 
// expected seg2[ 3 ]
initial
begin
	seg2_expected[3] = 1'bX;
end 
// expected seg2[ 2 ]
initial
begin
	seg2_expected[2] = 1'bX;
end 
// expected seg2[ 1 ]
initial
begin
	seg2_expected[1] = 1'bX;
end 
// expected seg2[ 0 ]
initial
begin
	seg2_expected[0] = 1'bX;
end 
// expected seg3[ 3 ]
initial
begin
	seg3_expected[3] = 1'bX;
end 
// expected seg3[ 2 ]
initial
begin
	seg3_expected[2] = 1'bX;
end 
// expected seg3[ 1 ]
initial
begin
	seg3_expected[1] = 1'bX;
end 
// expected seg3[ 0 ]
initial
begin
	seg3_expected[0] = 1'bX;
end 

// expected wash
initial
begin
	wash_expected = 1'bX;
end 

// expected water
initial
begin
	water_expected = 1'bX;
end 

// expected dewater
initial
begin
	dewater_expected = 1'bX;
end 

// expected alarm
initial
begin
	alarm_expected = 1'bX;
end 
// generate trigger
always @(alarm_expected or alarm or dewater_expected or dewater or seg0_expected or seg0 or seg1_expected or seg1 or seg2_expected or seg2 or seg3_expected or seg3 or wash_expected or wash or water_expected or water)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected alarm = %b | expected dewater = %b | expected seg0 = %b | expected seg1 = %b | expected seg2 = %b | expected seg3 = %b | expected wash = %b | expected water = %b | ",alarm_expected_prev,dewater_expected_prev,seg0_expected_prev,seg1_expected_prev,seg2_expected_prev,seg3_expected_prev,wash_expected_prev,water_expected_prev);
	$display("| real alarm = %b | real dewater = %b | real seg0 = %b | real seg1 = %b | real seg2 = %b | real seg3 = %b | real wash = %b | real water = %b | ",alarm_prev,dewater_prev,seg0_prev,seg1_prev,seg2_prev,seg3_prev,wash_prev,water_prev);
`endif
	if (
		( alarm_expected_prev !== 1'bx ) && ( alarm_prev !== alarm_expected_prev )
		&& ((alarm_expected_prev !== last_alarm_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port alarm :: @time = %t",  $realtime);
		$display ("     Expected value = %b", alarm_expected_prev);
		$display ("     Real value = %b", alarm_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_alarm_exp = alarm_expected_prev;
	end
	if (
		( dewater_expected_prev !== 1'bx ) && ( dewater_prev !== dewater_expected_prev )
		&& ((dewater_expected_prev !== last_dewater_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port dewater :: @time = %t",  $realtime);
		$display ("     Expected value = %b", dewater_expected_prev);
		$display ("     Real value = %b", dewater_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_dewater_exp = dewater_expected_prev;
	end
	if (
		( seg0_expected_prev[0] !== 1'bx ) && ( seg0_prev[0] !== seg0_expected_prev[0] )
		&& ((seg0_expected_prev[0] !== last_seg0_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg0_expected_prev);
		$display ("     Real value = %b", seg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg0_exp[0] = seg0_expected_prev[0];
	end
	if (
		( seg0_expected_prev[1] !== 1'bx ) && ( seg0_prev[1] !== seg0_expected_prev[1] )
		&& ((seg0_expected_prev[1] !== last_seg0_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg0_expected_prev);
		$display ("     Real value = %b", seg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg0_exp[1] = seg0_expected_prev[1];
	end
	if (
		( seg0_expected_prev[2] !== 1'bx ) && ( seg0_prev[2] !== seg0_expected_prev[2] )
		&& ((seg0_expected_prev[2] !== last_seg0_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg0_expected_prev);
		$display ("     Real value = %b", seg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg0_exp[2] = seg0_expected_prev[2];
	end
	if (
		( seg0_expected_prev[3] !== 1'bx ) && ( seg0_prev[3] !== seg0_expected_prev[3] )
		&& ((seg0_expected_prev[3] !== last_seg0_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg0_expected_prev);
		$display ("     Real value = %b", seg0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_seg0_exp[3] = seg0_expected_prev[3];
	end
	if (
		( seg1_expected_prev[0] !== 1'bx ) && ( seg1_prev[0] !== seg1_expected_prev[0] )
		&& ((seg1_expected_prev[0] !== last_seg1_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg1_exp[0] = seg1_expected_prev[0];
	end
	if (
		( seg1_expected_prev[1] !== 1'bx ) && ( seg1_prev[1] !== seg1_expected_prev[1] )
		&& ((seg1_expected_prev[1] !== last_seg1_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg1_exp[1] = seg1_expected_prev[1];
	end
	if (
		( seg1_expected_prev[2] !== 1'bx ) && ( seg1_prev[2] !== seg1_expected_prev[2] )
		&& ((seg1_expected_prev[2] !== last_seg1_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg1_exp[2] = seg1_expected_prev[2];
	end
	if (
		( seg1_expected_prev[3] !== 1'bx ) && ( seg1_prev[3] !== seg1_expected_prev[3] )
		&& ((seg1_expected_prev[3] !== last_seg1_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg1_expected_prev);
		$display ("     Real value = %b", seg1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_seg1_exp[3] = seg1_expected_prev[3];
	end
	if (
		( seg2_expected_prev[0] !== 1'bx ) && ( seg2_prev[0] !== seg2_expected_prev[0] )
		&& ((seg2_expected_prev[0] !== last_seg2_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg2_exp[0] = seg2_expected_prev[0];
	end
	if (
		( seg2_expected_prev[1] !== 1'bx ) && ( seg2_prev[1] !== seg2_expected_prev[1] )
		&& ((seg2_expected_prev[1] !== last_seg2_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg2_exp[1] = seg2_expected_prev[1];
	end
	if (
		( seg2_expected_prev[2] !== 1'bx ) && ( seg2_prev[2] !== seg2_expected_prev[2] )
		&& ((seg2_expected_prev[2] !== last_seg2_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg2_exp[2] = seg2_expected_prev[2];
	end
	if (
		( seg2_expected_prev[3] !== 1'bx ) && ( seg2_prev[3] !== seg2_expected_prev[3] )
		&& ((seg2_expected_prev[3] !== last_seg2_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg2_expected_prev);
		$display ("     Real value = %b", seg2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_seg2_exp[3] = seg2_expected_prev[3];
	end
	if (
		( seg3_expected_prev[0] !== 1'bx ) && ( seg3_prev[0] !== seg3_expected_prev[0] )
		&& ((seg3_expected_prev[0] !== last_seg3_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg3_exp[0] = seg3_expected_prev[0];
	end
	if (
		( seg3_expected_prev[1] !== 1'bx ) && ( seg3_prev[1] !== seg3_expected_prev[1] )
		&& ((seg3_expected_prev[1] !== last_seg3_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg3_exp[1] = seg3_expected_prev[1];
	end
	if (
		( seg3_expected_prev[2] !== 1'bx ) && ( seg3_prev[2] !== seg3_expected_prev[2] )
		&& ((seg3_expected_prev[2] !== last_seg3_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg3_exp[2] = seg3_expected_prev[2];
	end
	if (
		( seg3_expected_prev[3] !== 1'bx ) && ( seg3_prev[3] !== seg3_expected_prev[3] )
		&& ((seg3_expected_prev[3] !== last_seg3_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg3_expected_prev);
		$display ("     Real value = %b", seg3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_seg3_exp[3] = seg3_expected_prev[3];
	end
	if (
		( wash_expected_prev !== 1'bx ) && ( wash_prev !== wash_expected_prev )
		&& ((wash_expected_prev !== last_wash_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wash :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wash_expected_prev);
		$display ("     Real value = %b", wash_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_wash_exp = wash_expected_prev;
	end
	if (
		( water_expected_prev !== 1'bx ) && ( water_prev !== water_expected_prev )
		&& ((water_expected_prev !== last_water_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port water :: @time = %t",  $realtime);
		$display ("     Expected value = %b", water_expected_prev);
		$display ("     Real value = %b", water_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_water_exp = water_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module TimeCounter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [2:0] state_in;
// wires                                               
wire alarm;
wire dewater;
wire [3:0] seg0;
wire [3:0] seg1;
wire [3:0] seg2;
wire [3:0] seg3;
wire wash;
wire water;

wire sampler;                             

// assign statements (if any)                          
TimeCounter i1 (
// port map - connection between master ports and signals/registers   
	.alarm(alarm),
	.clk(clk),
	.dewater(dewater),
	.reset(reset),
	.seg0(seg0),
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.state_in(state_in),
	.wash(wash),
	.water(water)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 
// state_in[ 2 ]
initial
begin
	state_in[2] = 1'b0;
	state_in[2] = #320000 1'b1;
	state_in[2] = #440000 1'b0;
end 
// state_in[ 1 ]
initial
begin
	state_in[1] = 1'b0;
	state_in[1] = #20000 1'b1;
	state_in[1] = #300000 1'b0;
end 
// state_in[ 0 ]
initial
begin
	state_in[0] = 1'b0;
	state_in[0] = #10000 1'b1;
	state_in[0] = #10000 1'b0;
end 

// reset
initial
begin
	reset = 1'b1;
end 

TimeCounter_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.state_in(state_in),
	.sampler_tx(sampler)
);

TimeCounter_vlg_check_tst tb_out(
	.alarm(alarm),
	.dewater(dewater),
	.seg0(seg0),
	.seg1(seg1),
	.seg2(seg2),
	.seg3(seg3),
	.wash(wash),
	.water(water),
	.sampler_rx(sampler)
);
endmodule

