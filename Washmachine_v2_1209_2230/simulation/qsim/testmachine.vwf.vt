// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2023 22:39:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Washmachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Washmachine_vlg_sample_tst(
	clk_24M,
	reset0,
	start,
	stop,
	waterfull,
	sampler_tx
);
input  clk_24M;
input  reset0;
input  start;
input  stop;
input  waterfull;
output sampler_tx;

reg sample;
time current_time;
always @(clk_24M or reset0 or start or stop or waterfull)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Washmachine_vlg_check_tst (
	enable_out,
	segment_out,
	state_display_out,
	sampler_rx
);
input [3:0] enable_out;
input [6:0] segment_out;
input [5:0] state_display_out;
input sampler_rx;

reg [3:0] enable_out_expected;
reg [6:0] segment_out_expected;
reg [5:0] state_display_out_expected;

reg [3:0] enable_out_prev;
reg [6:0] segment_out_prev;
reg [5:0] state_display_out_prev;

reg [3:0] enable_out_expected_prev;
reg [6:0] segment_out_expected_prev;
reg [5:0] state_display_out_expected_prev;

reg [3:0] last_enable_out_exp;
reg [6:0] last_segment_out_exp;
reg [5:0] last_state_display_out_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	enable_out_prev = enable_out;
	segment_out_prev = segment_out;
	state_display_out_prev = state_display_out;
end

// update expected /o prevs

always @(trigger)
begin
	enable_out_expected_prev = enable_out_expected;
	segment_out_expected_prev = segment_out_expected;
	state_display_out_expected_prev = state_display_out_expected;
end


// expected state_display_out[ 5 ]
initial
begin
	state_display_out_expected[5] = 1'bX;
	state_display_out_expected[5] = #999000 1'b0;
end 
// expected state_display_out[ 4 ]
initial
begin
	state_display_out_expected[4] = 1'bX;
	state_display_out_expected[4] = #999000 1'b0;
end 
// expected state_display_out[ 3 ]
initial
begin
	state_display_out_expected[3] = 1'bX;
	state_display_out_expected[3] = #999000 1'b0;
end 
// expected state_display_out[ 2 ]
initial
begin
	state_display_out_expected[2] = 1'bX;
	state_display_out_expected[2] = #999000 1'b0;
end 
// expected state_display_out[ 1 ]
initial
begin
	state_display_out_expected[1] = 1'bX;
	state_display_out_expected[1] = #999000 1'b0;
end 
// expected state_display_out[ 0 ]
initial
begin
	state_display_out_expected[0] = 1'bX;
	state_display_out_expected[0] = #999000 1'b0;
end 
// expected enable_out[ 3 ]
initial
begin
	enable_out_expected[3] = 1'bX;
	enable_out_expected[3] = #999000 1'b0;
end 
// expected enable_out[ 2 ]
initial
begin
	enable_out_expected[2] = 1'bX;
	enable_out_expected[2] = #999000 1'b0;
end 
// expected enable_out[ 1 ]
initial
begin
	enable_out_expected[1] = 1'bX;
	enable_out_expected[1] = #999000 1'b0;
end 
// expected enable_out[ 0 ]
initial
begin
	enable_out_expected[0] = 1'bX;
	enable_out_expected[0] = #999000 1'b0;
end 
// expected segment_out[ 6 ]
initial
begin
	segment_out_expected[6] = 1'bX;
	segment_out_expected[6] = #999000 1'b0;
end 
// expected segment_out[ 5 ]
initial
begin
	segment_out_expected[5] = 1'bX;
	segment_out_expected[5] = #999000 1'b0;
end 
// expected segment_out[ 4 ]
initial
begin
	segment_out_expected[4] = 1'bX;
	segment_out_expected[4] = #999000 1'b0;
end 
// expected segment_out[ 3 ]
initial
begin
	segment_out_expected[3] = 1'bX;
	segment_out_expected[3] = #999000 1'b0;
end 
// expected segment_out[ 2 ]
initial
begin
	segment_out_expected[2] = 1'bX;
	segment_out_expected[2] = #999000 1'b0;
end 
// expected segment_out[ 1 ]
initial
begin
	segment_out_expected[1] = 1'bX;
	segment_out_expected[1] = #999000 1'b0;
end 
// expected segment_out[ 0 ]
initial
begin
	segment_out_expected[0] = 1'bX;
	segment_out_expected[0] = #999000 1'b0;
end 
// generate trigger
always @(enable_out_expected or enable_out or segment_out_expected or segment_out or state_display_out_expected or state_display_out)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected enable_out = %b | expected segment_out = %b | expected state_display_out = %b | ",enable_out_expected_prev,segment_out_expected_prev,state_display_out_expected_prev);
	$display("| real enable_out = %b | real segment_out = %b | real state_display_out = %b | ",enable_out_prev,segment_out_prev,state_display_out_prev);
`endif
	if (
		( enable_out_expected_prev[0] !== 1'bx ) && ( enable_out_prev[0] !== enable_out_expected_prev[0] )
		&& ((enable_out_expected_prev[0] !== last_enable_out_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_out_expected_prev);
		$display ("     Real value = %b", enable_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_enable_out_exp[0] = enable_out_expected_prev[0];
	end
	if (
		( enable_out_expected_prev[1] !== 1'bx ) && ( enable_out_prev[1] !== enable_out_expected_prev[1] )
		&& ((enable_out_expected_prev[1] !== last_enable_out_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_out_expected_prev);
		$display ("     Real value = %b", enable_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_enable_out_exp[1] = enable_out_expected_prev[1];
	end
	if (
		( enable_out_expected_prev[2] !== 1'bx ) && ( enable_out_prev[2] !== enable_out_expected_prev[2] )
		&& ((enable_out_expected_prev[2] !== last_enable_out_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_out_expected_prev);
		$display ("     Real value = %b", enable_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_enable_out_exp[2] = enable_out_expected_prev[2];
	end
	if (
		( enable_out_expected_prev[3] !== 1'bx ) && ( enable_out_prev[3] !== enable_out_expected_prev[3] )
		&& ((enable_out_expected_prev[3] !== last_enable_out_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port enable_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", enable_out_expected_prev);
		$display ("     Real value = %b", enable_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_enable_out_exp[3] = enable_out_expected_prev[3];
	end
	if (
		( segment_out_expected_prev[0] !== 1'bx ) && ( segment_out_prev[0] !== segment_out_expected_prev[0] )
		&& ((segment_out_expected_prev[0] !== last_segment_out_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[0] = segment_out_expected_prev[0];
	end
	if (
		( segment_out_expected_prev[1] !== 1'bx ) && ( segment_out_prev[1] !== segment_out_expected_prev[1] )
		&& ((segment_out_expected_prev[1] !== last_segment_out_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[1] = segment_out_expected_prev[1];
	end
	if (
		( segment_out_expected_prev[2] !== 1'bx ) && ( segment_out_prev[2] !== segment_out_expected_prev[2] )
		&& ((segment_out_expected_prev[2] !== last_segment_out_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[2] = segment_out_expected_prev[2];
	end
	if (
		( segment_out_expected_prev[3] !== 1'bx ) && ( segment_out_prev[3] !== segment_out_expected_prev[3] )
		&& ((segment_out_expected_prev[3] !== last_segment_out_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[3] = segment_out_expected_prev[3];
	end
	if (
		( segment_out_expected_prev[4] !== 1'bx ) && ( segment_out_prev[4] !== segment_out_expected_prev[4] )
		&& ((segment_out_expected_prev[4] !== last_segment_out_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[4] = segment_out_expected_prev[4];
	end
	if (
		( segment_out_expected_prev[5] !== 1'bx ) && ( segment_out_prev[5] !== segment_out_expected_prev[5] )
		&& ((segment_out_expected_prev[5] !== last_segment_out_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[5] = segment_out_expected_prev[5];
	end
	if (
		( segment_out_expected_prev[6] !== 1'bx ) && ( segment_out_prev[6] !== segment_out_expected_prev[6] )
		&& ((segment_out_expected_prev[6] !== last_segment_out_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port segment_out[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", segment_out_expected_prev);
		$display ("     Real value = %b", segment_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_segment_out_exp[6] = segment_out_expected_prev[6];
	end
	if (
		( state_display_out_expected_prev[0] !== 1'bx ) && ( state_display_out_prev[0] !== state_display_out_expected_prev[0] )
		&& ((state_display_out_expected_prev[0] !== last_state_display_out_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[0] = state_display_out_expected_prev[0];
	end
	if (
		( state_display_out_expected_prev[1] !== 1'bx ) && ( state_display_out_prev[1] !== state_display_out_expected_prev[1] )
		&& ((state_display_out_expected_prev[1] !== last_state_display_out_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[1] = state_display_out_expected_prev[1];
	end
	if (
		( state_display_out_expected_prev[2] !== 1'bx ) && ( state_display_out_prev[2] !== state_display_out_expected_prev[2] )
		&& ((state_display_out_expected_prev[2] !== last_state_display_out_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[2] = state_display_out_expected_prev[2];
	end
	if (
		( state_display_out_expected_prev[3] !== 1'bx ) && ( state_display_out_prev[3] !== state_display_out_expected_prev[3] )
		&& ((state_display_out_expected_prev[3] !== last_state_display_out_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[3] = state_display_out_expected_prev[3];
	end
	if (
		( state_display_out_expected_prev[4] !== 1'bx ) && ( state_display_out_prev[4] !== state_display_out_expected_prev[4] )
		&& ((state_display_out_expected_prev[4] !== last_state_display_out_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[4] = state_display_out_expected_prev[4];
	end
	if (
		( state_display_out_expected_prev[5] !== 1'bx ) && ( state_display_out_prev[5] !== state_display_out_expected_prev[5] )
		&& ((state_display_out_expected_prev[5] !== last_state_display_out_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port state_display_out[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", state_display_out_expected_prev);
		$display ("     Real value = %b", state_display_out_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_state_display_out_exp[5] = state_display_out_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Washmachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk_24M;
reg reset0;
reg start;
reg stop;
reg waterfull;
// wires                                               
wire [3:0] enable_out;
wire [6:0] segment_out;
wire [5:0] state_display_out;

wire sampler;                             

// assign statements (if any)                          
Washmachine i1 (
// port map - connection between master ports and signals/registers   
	.clk_24M(clk_24M),
	.enable_out(enable_out),
	.reset0(reset0),
	.segment_out(segment_out),
	.start(start),
	.state_display_out(state_display_out),
	.stop(stop),
	.waterfull(waterfull)
);

// clk_24M
always
begin
	clk_24M = 1'b0;
	clk_24M = #5000 1'b1;
	#5000;
end 

// reset0
initial
begin
	reset0 = 1'b1;
end 

// start
initial
begin
	start = 1'b0;
	start = #80000 1'b1;
end 

// waterfull
initial
begin
	waterfull = 1'b1;
	waterfull = #80000 1'b0;
	waterfull = #80000 1'b1;
end 

// stop
initial
begin
	stop = 1'b1;
end 

Washmachine_vlg_sample_tst tb_sample (
	.clk_24M(clk_24M),
	.reset0(reset0),
	.start(start),
	.stop(stop),
	.waterfull(waterfull),
	.sampler_tx(sampler)
);

Washmachine_vlg_check_tst tb_out(
	.enable_out(enable_out),
	.segment_out(segment_out),
	.state_display_out(state_display_out),
	.sampler_rx(sampler)
);
endmodule

